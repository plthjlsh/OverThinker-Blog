---
import { getEntry, render } from "astro:content";
import Markdown from "@components/misc/Markdown.astro";
import I18nKey from "../i18n/i18nKey";
import { i18n } from "../i18n/translation";
import MainGridLayout from "../layouts/MainGridLayout.astro";

const aboutPost = await getEntry("spec", "about");

if (!aboutPost) {
	throw new Error("About page content not found");
}

const { Content } = await render(aboutPost);
---

<MainGridLayout title={i18n(I18nKey.about)} description={i18n(I18nKey.about)}>
    <div class="flex w-full rounded-[var(--radius-large)] overflow-hidden relative min-h-32">
        <div class="card-base z-10 px-9 py-6 relative w-full ">
            <Markdown class="mt-2">
                <Content />
            </Markdown>
        </div>
        
        <!-- 眼球容器 - 右上角 -->
        <div id="eye-container" class="absolute top-4 right-4 z-20">
            <div class="eye">
                <div class="pupil">
                    <div class="pupil-reflect"></div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- 眼球样式 -->
    <style>
        .eye {
            width: 60px;
            height: 40px;
            background: linear-gradient(135deg, #f0f0f0 0%, #ffffff 100%);
            border-radius: 60% / 50%;
            position: relative;
            border: 2px solid #333;
            overflow: hidden;
            box-shadow: 
                0 0 15px rgba(0, 0, 0, 0.3),
                inset 5px 5px 10px rgba(255, 255, 255, 0.8),
                inset -5px -5px 10px rgba(0, 0, 0, 0.1);
            transform: rotate(5deg);
            cursor: pointer;
            transition: transform 0.3s ease;
        }
        .pupil {
            width: 25px;
            height: 25px;
            background: linear-gradient(135deg, #00ff00 0%, #008800 100%);
            border-radius: 50%;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            transition: transform 0.08s ease-out;
            box-shadow: 
                0 0 12px rgba(0, 255, 0, 0.8),
                inset 2px 2px 5px rgba(255, 255, 255, 0.4),
                inset -2px -2px 5px rgba(0, 0, 0, 0.4);
        }
        .pupil-reflect {
            width: 8px;
            height: 8px;
            background: rgba(255, 255, 255, 0.8);
            border-radius: 50%;
            position: absolute;
            top: 25%;
            left: 25%;
            z-index: 2;
            box-shadow: 0 0 5px white;
        }
        #eye-container:hover .eye {
            transform: rotate(5deg) scale(1.1);
        }
        #eye-container:hover .pupil {
            box-shadow: 
                0 0 18px rgba(0, 255, 0, 1),
                inset 2px 2px 5px rgba(255, 255, 255, 0.4),
                inset -2px -2px 5px rgba(0, 0, 0, 0.4);
        }
        #eye-container:active .eye {
            transform: rotate(5deg) scale(0.95);
            transition: transform 0.1s ease;
        }
        
        /* 移动端优化 */
        @media (max-width: 768px) {
            .eye {
                width: 50px;
                height: 35px;
            }
            .pupil {
                width: 20px;
                height: 20px;
            }
        }
    </style>
    
    <!-- 修复后的眼球跟随脚本 -->
    <script>
        // 提取眼球初始化逻辑为独立函数
        function initEyeFollow() {
            // 确保只在客户端执行，且能找到眼球元素
            const pupil = document.querySelector('.pupil');
            const eye = document.querySelector('.eye');
            const container = document.querySelector('#eye-container');
            
            if (!pupil || !eye || !container) return;

            // 移除旧的事件监听（避免多次绑定）
            document.removeEventListener('mousemove', handleMouseMove);
            document.removeEventListener('touchmove', handleTouchMove);
            container.removeEventListener('click', handleClick);

            // 获取眼球中心位置的工具函数
            function getEyeCenter() {
                const rect = eye.getBoundingClientRect();
                return {
                    x: rect.left + rect.width / 2,
                    y: rect.top + rect.height / 2
                };
            }

            // 瞳孔移动核心逻辑
            function handleMouseMove(e) {
                const eyeCenter = getEyeCenter();
                const deltaX = e.clientX - eyeCenter.x;
                const deltaY = e.clientY - eyeCenter.y;
                
                // 限制瞳孔移动范围（避免超出眼白）
                const angle = Math.atan2(deltaY, deltaX);
                const maxDistance = 7; // 椭圆眼白的合理移动范围
                const distance = Math.min(maxDistance, Math.sqrt(deltaX ** 2 + deltaY ** 2) / 30);
                
                // 计算并应用瞳孔新位置
                const moveX = Math.cos(angle) * distance;
                const moveY = Math.sin(angle) * distance;
                pupil.style.transform = `translate(calc(-50% + ${moveX}px), calc(-50% + ${moveY}px))`;
            }

            // 移动设备触摸事件支持 - 修复版
            function handleTouchMove(e) {
                // 只在单指触摸时处理（避免干扰多指缩放和滚动）
                if (e.touches.length === 1) {
                    // 只在眼球区域内触摸时才阻止默认行为
                    const eyeRect = eye.getBoundingClientRect();
                    const touchX = e.touches[0].clientX;
                    const touchY = e.touches[0].clientY;
                    
                    // 检查触摸点是否在眼球区域内
                    const isInEyeArea = (
                        touchX >= eyeRect.left && 
                        touchX <= eyeRect.right &&
                        touchY >= eyeRect.top && 
                        touchY <= eyeRect.bottom
                    );
                    
                    if (isInEyeArea) {
                        e.preventDefault(); // 只在眼球区域内阻止默认行为
                        handleMouseMove(e.touches[0]); // 复用鼠标移动逻辑
                    }
                }
            }
            
            // 点击特效
            function handleClick() {
                container.style.transform = 'scale(1.2)';
                setTimeout(() => {
                    container.style.transform = 'scale(1)';
                }, 300);
            }

            // 重新绑定事件监听
            document.addEventListener('mousemove', handleMouseMove);
            document.addEventListener('touchmove', handleTouchMove, { passive: false });
            container.addEventListener('click', handleClick);
            
            // 添加触摸开始事件，确保首次触摸就能响应
            eye.addEventListener('touchstart', (e) => {
                if (e.touches.length === 1) {
                    handleMouseMove(e.touches[0]);
                }
            });
        }

        // 页面加载时初始化
        if (typeof window !== 'undefined') {
            // 使用DOMContentLoaded确保DOM已加载
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', initEyeFollow);
            } else {
                initEyeFollow();
            }

            // Swup 页面切换后执行
            if (window.swup) {
                window.swup.hooks.on('page:view', initEyeFollow);
            } else {
                document.addEventListener('swup:enable', () => {
                    window.swup.hooks.on('page:view', initEyeFollow);
                });
            }
        }
    </script>
</MainGridLayout>